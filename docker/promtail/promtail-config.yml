# Promtail Configuration for Radiology AI System
# Medical-grade log collection and forwarding

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

# Client configuration for sending logs to Loki
clients:
  - url: http://loki:3100/loki/api/v1/push
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    batchsize: 1048576
    batchwait: 1s
    external_labels:
      environment: production
      datacenter: medical-center
      system: radiology-ai

# Position file to track log reading progress
positions:
  filename: /tmp/positions.yaml

# Scrape configurations for different log sources
scrape_configs:

  # Docker container logs
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      # Only scrape containers from our Docker Compose
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        regex: radiology-ai-system
        action: keep
      
      # Set job name based on service
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: job
        replacement: ${1}
      
      # Set instance to container name
      - source_labels: [__meta_docker_container_name]
        target_label: instance
        replacement: ${1}
      
      # Add container ID
      - source_labels: [__meta_docker_container_id]
        target_label: container_id
        replacement: ${1:12}
      
      # Add image information
      - source_labels: [__meta_docker_container_image]
        target_label: image
        replacement: ${1}
      
      # Add log path
      - source_labels: [__meta_docker_container_log_stream]
        target_label: stream
        replacement: ${1}

    pipeline_stages:
      # Parse JSON logs from Docker
      - json:
          expressions:
            log: log
            stream: stream
            time: time
            
      # Parse timestamp
      - timestamp:
          source: time
          format: RFC3339Nano
          
      # Extract log level for medical services
      - regex:
          expression: '(?P<level>ERROR|WARN|INFO|DEBUG|TRACE)'
          source: log
          
      # Extract medical-specific fields
      - regex:
          expression: '(?i)patient[_-]?id[=:]?\s*(?P<patient_id>[a-zA-Z0-9-]+)'
          source: log
          
      - regex:
          expression: '(?i)procedure[_-]?id[=:]?\s*(?P<procedure_id>[a-zA-Z0-9-]+)'
          source: log
          
      - regex:
          expression: '(?i)user[_-]?id[=:]?\s*(?P<user_id>[a-zA-Z0-9-]+)'
          source: log
          
      - regex:
          expression: '(?i)session[_-]?id[=:]?\s*(?P<session_id>[a-zA-Z0-9-]+)'
          source: log
          
      # Label medical priority levels
      - regex:
          expression: '(?i)(emergency|urgent|critical|high[_-]?priority)'
          source: log
          
      # Anonymize sensitive medical data (German GDPR compliance)
      - replace:
          expression: '(?P<patient_name>[A-ZÄÖÜ][a-zäöüß]+\s+[A-ZÄÖÜ][a-zäöüß]+)'
          replace: '[PATIENT_NAME_REDACTED]'
          source: log
          
      - replace:
          expression: '(?P<ssn>\d{3}-?\d{2}-?\d{4})'
          replace: '[SSN_REDACTED]'
          source: log
          
      # Add labels based on extracted fields
      - labels:
          level: level
          patient_id: patient_id
          procedure_id: procedure_id
          user_id: user_id
          session_id: session_id

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<path>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          method: method
          status: status
          path: path
      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*)'
      - labels:
          level: level
          pid: pid
      - timestamp:
          source: timestamp
          format: '2006/01/02 15:04:05'

  # PostgreSQL logs
  - job_name: postgresql
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgresql
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \w+) \[(?P<pid>\d+)\]: \[(?P<line_num>\d+)-\d+\] user=(?P<user>\w*),db=(?P<database>\w*),app=(?P<application>\w*),client=(?P<client_addr>[\d\.]*) (?P<level>\w+):\s+(?P<message>.*)'
      - labels:
          level: level
          user: user
          database: database
          application: application
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000 MST'

  # Medical audit logs (special handling)
  - job_name: medical-audit
    static_configs:
      - targets:
          - localhost
        labels:
          job: medical-audit
          __path__: /var/log/medical-audit/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            user_id: user_id
            action: action
            resource: resource
            outcome: outcome
            patient_id: patient_id
            procedure_id: procedure_id
            ip_address: ip_address
            user_agent: user_agent
            
      - labels:
          action: action
          outcome: outcome
          user_id: user_id
          
      # High priority for audit failures
      - match:
          selector: '{outcome="failure"}'
          stages:
            - labels:
                priority: high
                
      - timestamp:
          source: timestamp
          format: RFC3339

  # System logs
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w{3}\s+\d{1,2} \d{2}:\d{2}:\d{2}) (?P<hostname>\S+) (?P<process>\S+)(\[(?P<pid>\d+)\])?: (?P<message>.*)'
      - labels:
          hostname: hostname
          process: process
      - timestamp:
          source: timestamp
          format: 'Jan 2 15:04:05'
          
# Target configuration
target_config:
  sync_period: 10s