# =============================================================================
# MedEssenceAI Production Nginx Configuration
# =============================================================================

# Main context
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker settings
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
                    
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log detailed;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # File upload settings
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 16k;
    large_client_header_buffers 4 16k;
    
    # Timeout settings
    client_body_timeout 30;
    client_header_timeout 30;
    send_timeout 30;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self'" always;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Upstream servers
    upstream frontend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream websocket_proxy {
        least_conn;
        server websocket-proxy:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;
    
    # ==========================================================================
    # HTTP to HTTPS Redirect Server Block
    # ==========================================================================
    server {
        listen 80;
        server_name _;
        
        # Security headers for HTTP
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # Health check endpoint (allow HTTP for monitoring)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # ==========================================================================
    # HTTPS Server Block
    # ==========================================================================
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/medessenceai.crt;
        ssl_certificate_key /etc/ssl/private/medessenceai.key;
        
        # SSL Security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Root and index
        root /var/www/html;
        index index.html;
        
        # =======================================================================
        # WebSocket Proxy (Real-time transcription)
        # =======================================================================
        location /ws/ {
            # Rate limiting
            limit_req zone=websocket burst=10 nodelay;
            
            # Proxy settings for WebSocket
            proxy_pass http://websocket_proxy;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # No caching for WebSocket
            proxy_cache off;
            proxy_buffering off;
        }
        
        # =======================================================================
        # API Routes
        # =======================================================================
        location /api/ {
            # Rate limiting for API
            limit_req zone=api burst=50 nodelay;
            
            # Proxy to WebSocket proxy service (handles API too)
            proxy_pass http://websocket_proxy/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Caching for GET requests only
            proxy_cache my_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 1m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }
        
        # Health check endpoint
        location /health {
            # No rate limiting for health checks
            access_log off;
            
            proxy_pass http://websocket_proxy/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # =======================================================================
        # Static Assets with Caching
        # =======================================================================
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Long-term caching for static assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Try to serve from frontend, fallback to proxy
            try_files $uri @frontend;
            
            # Compression
            gzip_static on;
        }
        
        # =======================================================================
        # Next.js specific routes
        # =======================================================================
        location /_next/ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Long-term caching for Next.js assets
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # =======================================================================
        # Main Application (Frontend)
        # =======================================================================
        location / {
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Try to serve static files, fallback to Next.js app
            try_files $uri $uri/ @frontend;
        }
        
        # Frontend proxy fallback
        location @frontend {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Caching
            proxy_cache my_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }
        
        # =======================================================================
        # Security and Admin Routes
        # =======================================================================
        
        # Block access to sensitive files
        location ~* \.(env|log|bak|sql|conf)$ {
            deny all;
            return 404;
        }
        
        # Block access to hidden files
        location ~ /\. {
            deny all;
            return 404;
        }
        
        # Monitoring endpoints (restrict by IP if needed)
        location /metrics {
            # Add IP restrictions here if needed
            # allow 10.0.0.0/8;
            # deny all;
            
            proxy_pass http://websocket_proxy/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # ==========================================================================
    # Monitoring Server Block (Optional)
    # ==========================================================================
    server {
        listen 3001 ssl http2;
        server_name ${DOMAIN_NAME};
        
        # SSL Configuration (reuse from main server)
        ssl_certificate /etc/ssl/certs/medessenceai.crt;
        ssl_certificate_key /etc/ssl/private/medessenceai.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        
        # Basic auth for monitoring (configure as needed)
        # auth_basic "MedEssenceAI Monitoring";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        # Proxy to Grafana
        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}