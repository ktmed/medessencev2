version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: radiology-ai-gateway
    ports:
      - "3000:3000"
      - "9090:9090" # Metrics port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://radiology_user:secure_password_123@postgres:5432/radiology_ai?schema=public
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secure-jwt-secret-key-here-min-256-bits-development-only
      - JWT_REFRESH_SECRET=your-super-secure-refresh-secret-key-here-min-256-bits-development-only
      - SESSION_SECRET=your-super-secure-session-secret-key-here-development-only
      - TRANSCRIPTION_SERVICE_URL=http://transcription:8001
      - REPORT_GENERATION_SERVICE_URL=http://reports:8002
      - SUMMARY_GENERATION_SERVICE_URL=http://summaries:8003
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - LOG_LEVEL=debug
      - METRICS_ENABLED=true
      - AUDIT_LOG_ENABLED=true
      - GDPR_COMPLIANCE=true
      - SWAGGER_ENABLED=true
    volumes:
      - .:/app
      - /app/node_modules
      - gateway_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - radiology_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: radiology-ai-postgres
    environment:
      - POSTGRES_USER=radiology_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_DB=radiology_ai
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - radiology_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radiology_user -d radiology_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: radiology-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - radiology_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: radiology-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - gateway
    networks:
      - radiology_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: radiology-ai-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - gateway
    networks:
      - radiology_network
    restart: unless-stopped

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: radiology-ai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - radiology_network
    restart: unless-stopped

  # Mock services for development (remove in production)
  transcription:
    image: mockserver/mockserver:latest
    container_name: mock-transcription
    ports:
      - "8001:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/transcription-expectations.json
    volumes:
      - ./mocks/transcription-expectations.json:/config/transcription-expectations.json:ro
    networks:
      - radiology_network
    profiles:
      - mock

  reports:
    image: mockserver/mockserver:latest
    container_name: mock-reports
    ports:
      - "8002:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/reports-expectations.json
    volumes:
      - ./mocks/reports-expectations.json:/config/reports-expectations.json:ro
    networks:
      - radiology_network
    profiles:
      - mock

  summaries:
    image: mockserver/mockserver:latest
    container_name: mock-summaries
    ports:
      - "8003:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/summaries-expectations.json
    volumes:
      - ./mocks/summaries-expectations.json:/config/summaries-expectations.json:ro
    networks:
      - radiology_network
    profiles:
      - mock

# Networks
networks:
  radiology_network:
    driver: bridge
    name: radiology_network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: radiology_postgres_data
  redis_data:
    driver: local
    name: radiology_redis_data
  gateway_logs:
    driver: local
    name: radiology_gateway_logs
  nginx_logs:
    driver: local
    name: radiology_nginx_logs
  prometheus_data:
    driver: local
    name: radiology_prometheus_data
  grafana_data:
    driver: local
    name: radiology_grafana_data