version: '3.8'

services:
  # Redis service for session management and caching
  redis:
    image: redis:7-alpine
    container_name: transcription-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - transcription-network

  # Transcription service
  transcription:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        WHISPER_MODEL: ${WHISPER_MODEL:-base}
        ENABLE_CUDA: ${ENABLE_CUDA:-false}
    container_name: transcription-service
    restart: unless-stopped
    ports:
      - "${PORT:-8003}:8003"
    environment:
      # Server configuration
      HOST: 0.0.0.0
      PORT: 8003
      DEBUG: ${DEBUG:-false}
      WORKERS: ${WORKERS:-4}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB:-0}
      
      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-whisper-1}
      OPENAI_TIMEOUT: ${OPENAI_TIMEOUT:-60}
      
      # Whisper configuration
      WHISPER_MODEL: ${WHISPER_MODEL:-base}
      WHISPER_DEVICE: ${WHISPER_DEVICE:-cpu}
      USE_LOCAL_WHISPER: ${USE_LOCAL_WHISPER:-true}
      
      # Audio processing
      AUDIO_SAMPLE_RATE: ${AUDIO_SAMPLE_RATE:-16000}
      AUDIO_CHANNELS: ${AUDIO_CHANNELS:-1}
      MAX_AUDIO_SIZE: ${MAX_AUDIO_SIZE:-26214400}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Performance
      MAX_CONCURRENT_TRANSCRIPTIONS: ${MAX_CONCURRENT_TRANSCRIPTIONS:-10}
      TRANSCRIPTION_TIMEOUT: ${TRANSCRIPTION_TIMEOUT:-300}
      
    volumes:
      - transcription_uploads:/app/uploads
      - transcription_temp:/app/temp
      - transcription_models:/app/models
      - transcription_logs:/app/logs
      - transcription_data:/app/data
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - transcription-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: transcription-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - transcription
    networks:
      - transcription-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  transcription_uploads:
    driver: local
  transcription_temp:
    driver: local
  transcription_models:
    driver: local
  transcription_logs:
    driver: local
  transcription_data:
    driver: local

networks:
  transcription-network:
    driver: bridge