name: MedEssenceAI CI/CD Pipeline

# =============================================================================
# Trigger Configuration
# =============================================================================
on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# =============================================================================
# Environment Variables
# =============================================================================
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  
# =============================================================================
# Jobs Configuration
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # Code Quality and Security Analysis
  # ---------------------------------------------------------------------------
  code-analysis:
    name: Code Analysis & Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          # Backend dependencies
          cd backend && npm ci
          # Frontend dependencies  
          cd ../frontend && npm ci
          # Python services dependencies
          cd ../services/transcription && pip install -r requirements.txt
          cd ../report-generation && pip install -r requirements.txt
          cd ../summary-generation && pip install -r requirements.txt

      - name: Run ESLint (Backend & Frontend)
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Run TypeScript type checking
        run: |
          cd frontend && npm run type-check

      - name: Run Python linting (flake8)
        run: |
          flake8 services/transcription/ services/report-generation/ services/summary-generation/ \
            --max-line-length=88 \
            --extend-ignore=E203,W503 \
            --exclude=__pycache__,venv

      - name: Run Bandit security scan (Python)
        run: |
          pip install bandit[toml]
          bandit -r services/ -f json -o bandit-report.json || true

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          publishDeploymentId: ${{ github.event.deployment.id }}
          publishUrl: ${{ github.event.deployment.statuses_url }}
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            semgrep-results.json

  # ---------------------------------------------------------------------------
  # Unit & Integration Testing
  # ---------------------------------------------------------------------------
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [code-analysis]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: medessence_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../services/transcription && pip install -r requirements.txt
          cd ../report-generation && pip install -r requirements.txt
          cd ../summary-generation && pip install -r requirements.txt

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/medessence_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/medessence_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          cd backend && npm run test:ci

      - name: Run frontend tests
        env:
          NODE_ENV: test
        run: |
          cd frontend && npm run build

      - name: Run Python service tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/medessence_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd services/transcription && python -m pytest tests/ -v --cov=app --cov-report=xml
          cd ../report-generation && python -m pytest tests/ -v --cov=app --cov-report=xml
          cd ../summary-generation && python -m pytest tests/ -v --cov=app --cov-report=xml

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/medessence_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd tests/integration && python run_all_tests.py

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            backend/coverage/lcov.info
            services/transcription/coverage.xml
            services/report-generation/coverage.xml
            services/summary-generation/coverage.xml

  # ---------------------------------------------------------------------------
  # Docker Build & Push
  # ---------------------------------------------------------------------------
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service:
          - name: frontend
            context: ./frontend
            dockerfile: Dockerfile.production
          - name: backend
            context: ./backend
            dockerfile: Dockerfile
          - name: transcription
            context: ./services/transcription
            dockerfile: Dockerfile
          - name: report-generation
            context: ./services/report-generation
            dockerfile: Dockerfile
          - name: summary-generation
            context: ./services/summary-generation
            dockerfile: Dockerfile
          - name: websocket-proxy
            context: .
            dockerfile: Dockerfile.websocket-proxy
          - name: nginx
            context: ./docker/nginx
            dockerfile: Dockerfile

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ---------------------------------------------------------------------------
  # Deployment
  # ---------------------------------------------------------------------------
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://medessence-ai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name medessence-cluster

      - name: Deploy to Kubernetes
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Apply Kubernetes manifests
          envsubst < k8s/namespace.yml | kubectl apply -f -
          envsubst < k8s/configmap.yml | kubectl apply -f -
          envsubst < k8s/secrets.yml | kubectl apply -f -
          envsubst < k8s/postgres.yml | kubectl apply -f -
          envsubst < k8s/redis.yml | kubectl apply -f -
          envsubst < k8s/backend.yml | kubectl apply -f -
          envsubst < k8s/frontend.yml | kubectl apply -f -
          envsubst < k8s/services.yml | kubectl apply -f -
          envsubst < k8s/ingress.yml | kubectl apply -f -

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/medessence-frontend -n medessence-${{ env.ENVIRONMENT }}
          kubectl rollout status deployment/medessence-backend -n medessence-${{ env.ENVIRONMENT }}
          kubectl rollout status deployment/medessence-transcription -n medessence-${{ env.ENVIRONMENT }}

      - name: Run health checks
        run: |
          sleep 30
          ./scripts/health-check.sh production

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

# =============================================================================
# Workflow Security
# =============================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true