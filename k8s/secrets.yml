# =============================================================================
# MedEssenceAI Secrets Configuration
# IMPORTANT: This file contains placeholder values. 
# Actual secrets should be managed via external secret management systems.
# =============================================================================

# NOTE: In production, use external secret management like:
# - AWS Secrets Manager
# - HashiCorp Vault
# - Azure Key Vault
# - Google Secret Manager
# - Kubernetes External Secrets Operator (ESO)

# This file serves as a template - never commit actual secrets to Git!

---
apiVersion: v1
kind: Secret
metadata:
  name: medessence-secrets
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: medessence-ai
    environment: ${ENVIRONMENT}
    secret-type: application
  annotations:
    description: "MedEssenceAI application secrets"
    managed-by: "external-secrets-operator"
type: Opaque
stringData:
  # Database Secrets
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-service:5432/medessence?sslmode=require"
  
  # Redis Secrets
  REDIS_PASSWORD: "${REDIS_PASSWORD}"
  REDIS_URL: "redis://:${REDIS_PASSWORD}@redis-service:6379/0"
  
  # JWT & Session Secrets
  JWT_SECRET: "${JWT_SECRET}"
  JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
  SESSION_SECRET: "${SESSION_SECRET}"
  ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
  
  # AI Provider API Keys
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
  GOOGLE_API_KEY: "${GOOGLE_API_KEY}"
  
  # Email Service (for notifications)
  SMTP_HOST: "${SMTP_HOST}"
  SMTP_PORT: "${SMTP_PORT}"
  SMTP_USER: "${SMTP_USER}"
  SMTP_PASSWORD: "${SMTP_PASSWORD}"
  
  # Webhook & Integration Secrets
  SLACK_WEBHOOK_URL: "${SLACK_WEBHOOK_URL}"
  WEBHOOK_SECRET: "${WEBHOOK_SECRET}"
  
  # Monitoring & Analytics
  SENTRY_DSN: "${SENTRY_DSN}"
  MIXPANEL_TOKEN: "${MIXPANEL_TOKEN}"
  
  # Backup & Storage Secrets
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  S3_BACKUP_BUCKET: "${S3_BACKUP_BUCKET}"
  
  # SSL/TLS Certificates (if not using cert-manager)
  TLS_CERT: "${TLS_CERT}"
  TLS_KEY: "${TLS_KEY}"

---
# Medical Data Encryption Secrets (HIPAA Compliance)
apiVersion: v1
kind: Secret
metadata:
  name: medical-encryption-secrets
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: medessence-ai
    environment: ${ENVIRONMENT}
    secret-type: medical-compliance
    compliance: hipaa
  annotations:
    description: "HIPAA-compliant encryption keys for medical data"
    rotation-policy: "30d"
    backup-required: "true"
type: Opaque
stringData:
  # Patient Data Encryption Keys (AES-256)
  PHI_ENCRYPTION_KEY: "${PHI_ENCRYPTION_KEY}"
  PHI_ENCRYPTION_IV: "${PHI_ENCRYPTION_IV}"
  
  # Medical Record Encryption
  MEDICAL_RECORD_KEY: "${MEDICAL_RECORD_KEY}"
  AUDIT_LOG_ENCRYPTION_KEY: "${AUDIT_LOG_ENCRYPTION_KEY}"
  
  # Database Column Encryption
  DB_COLUMN_ENCRYPTION_KEY: "${DB_COLUMN_ENCRYPTION_KEY}"
  
  # File Storage Encryption
  FILE_ENCRYPTION_KEY: "${FILE_ENCRYPTION_KEY}"

---
# External Service API Keys
apiVersion: v1
kind: Secret
metadata:
  name: external-api-secrets
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: medessence-ai
    environment: ${ENVIRONMENT}
    secret-type: external-apis
type: Opaque
stringData:
  # Medical Terminology Services
  UMLS_API_KEY: "${UMLS_API_KEY}"
  ICD_API_KEY: "${ICD_API_KEY}"
  SNOMED_API_KEY: "${SNOMED_API_KEY}"
  
  # Speech-to-Text Services
  AZURE_SPEECH_KEY: "${AZURE_SPEECH_KEY}"
  GOOGLE_CLOUD_API_KEY: "${GOOGLE_CLOUD_API_KEY}"
  
  # Translation Services
  DEEPL_API_KEY: "${DEEPL_API_KEY}"
  AZURE_TRANSLATOR_KEY: "${AZURE_TRANSLATOR_KEY}"
  
  # Medical Image Analysis
  AZURE_MEDICAL_API_KEY: "${AZURE_MEDICAL_API_KEY}"
  
  # Compliance & Security Services
  HIPAA_COMPLIANCE_API_KEY: "${HIPAA_COMPLIANCE_API_KEY}"
  SECURITY_SCAN_API_KEY: "${SECURITY_SCAN_API_KEY}"

---
# Registry Secrets for Image Pulling
apiVersion: v1
kind: Secret
metadata:
  name: registry-secrets
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: medessence-ai
    environment: ${ENVIRONMENT}
    secret-type: registry-auth
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${DOCKER_CONFIG_JSON_BASE64}

---
# Example External Secrets Operator Configuration
# This shows how to integrate with AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-store
  namespace: medessence-${ENVIRONMENT}
spec:
  provider:
    aws:
      service: SecretsManager
      region: ${AWS_REGION}
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secret
  namespace: medessence-${ENVIRONMENT}
  annotations:
    description: "Pulls database credentials from AWS Secrets Manager"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: postgres-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: medessence/${ENVIRONMENT}/database
      property: username
  - secretKey: password
    remoteRef:
      key: medessence/${ENVIRONMENT}/database
      property: password

---
# External Secret for AI API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ai-api-keys
  namespace: medessence-${ENVIRONMENT}
  annotations:
    description: "Pulls AI provider API keys from AWS Secrets Manager"
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: ai-provider-keys
    creationPolicy: Owner
  data:
  - secretKey: openai_api_key
    remoteRef:
      key: medessence/${ENVIRONMENT}/ai-providers
      property: openai_api_key
  - secretKey: anthropic_api_key
    remoteRef:
      key: medessence/${ENVIRONMENT}/ai-providers
      property: anthropic_api_key
  - secretKey: google_api_key
    remoteRef:
      key: medessence/${ENVIRONMENT}/ai-providers
      property: google_api_key

---
# Secret for Service Account (if using IAM roles for service accounts)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: medessence-service-account
  namespace: medessence-${ENVIRONMENT}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/MedEssenceAI-${ENVIRONMENT}-ServiceRole
  labels:
    app: medessence-ai
    environment: ${ENVIRONMENT}
automountServiceAccountToken: true