# =============================================================================
# Redis Cache Deployment for MedEssenceAI
# High-performance caching with persistence and security
# =============================================================================

# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    service: cache
    environment: ${ENVIRONMENT}
spec:
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  type: ClusterIP

---
# Redis ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    environment: ${ENVIRONMENT}
data:
  redis.conf: |
    # Basic Configuration
    bind 0.0.0.0
    port 6379
    protected-mode no
    
    # Memory Management
    maxmemory ${REDIS_MAX_MEMORY:-1gb}
    maxmemory-policy allkeys-lru
    
    # Persistence Configuration
    save 900 1
    save 300 10
    save 60 10000
    
    # AOF Configuration
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    
    # Security Configuration
    requirepass ${REDIS_PASSWORD}
    
    # Logging
    loglevel notice
    logfile "/var/log/redis/redis-server.log"
    
    # Performance Tuning
    tcp-keepalive 300
    timeout 300
    tcp-backlog 511
    databases 16
    
    # Slow Query Logging
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Client Output Buffer Limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Memory Optimization
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # Network Configuration
    tcp-nodelay yes
    
    # Medical Data Security
    # Disable dangerous commands in production
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command DEBUG ""
    rename-command CONFIG "CONFIG_${ENVIRONMENT}_MEDESSENCE"
    rename-command EVAL ""
    
    # Enable keyspace notifications for monitoring
    notify-keyspace-events Ex

---
# Redis Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    environment: ${ENVIRONMENT}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ${STORAGE_CLASS:-gp3-encrypted}
  resources:
    requests:
      storage: ${REDIS_STORAGE_SIZE:-10Gi}

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    service: cache
    environment: ${ENVIRONMENT}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        service: cache
        environment: ${ENVIRONMENT}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: medessence-service-account
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: redis-init
          image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Initializing Redis data directory..."
              chown -R 999:999 /data
              chmod -R 755 /data
              echo "Redis initialization completed"
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      containers:
        - name: redis
          image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              name: redis
              protocol: TCP
          command:
            - redis-server
            - /etc/redis/redis.conf
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: medessence-secrets
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-storage
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
              readOnly: true
            - name: log-volume
              mountPath: /var/log/redis
          resources:
            requests:
              memory: ${REDIS_MEMORY_REQUEST:-256Mi}
              cpu: ${REDIS_CPU_REQUEST:-100m}
            limits:
              memory: ${REDIS_MEMORY_LIMIT:-1Gi}
              cpu: ${REDIS_CPU_LIMIT:-500m}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsUser: 999
            runAsGroup: 999
            capabilities:
              drop:
                - ALL
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            successThreshold: 1
        
        # Redis Exporter for Monitoring
        - name: redis-exporter
          image: oliver006/redis_exporter:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9121
              name: metrics
              protocol: TCP
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: medessence-secrets
                  key: REDIS_PASSWORD
            - name: REDIS_EXPORTER_CHECK_KEYS
              value: "session:*,cache:*,queue:*"
            - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
              value: "health,status"
          resources:
            requests:
              memory: 64Mi
              cpu: 50m
            limits:
              memory: 128Mi
              cpu: 100m
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 999
            runAsGroup: 999
            capabilities:
              drop:
                - ALL
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config
        - name: log-volume
          emptyDir:
            sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: redis
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "cache"
          operator: "Equal"
          value: "redis"
          effect: "NoSchedule"

---
# Redis Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis-backup
    service: cache
    environment: ${ENVIRONMENT}
spec:
  schedule: "${REDIS_BACKUP_SCHEDULE:-0 3 * * *}"  # Daily at 3 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: redis-backup
            service: cache
            environment: ${ENVIRONMENT}
        spec:
          serviceAccountName: medessence-service-account
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            fsGroup: 999
          containers:
            - name: redis-backup
              image: redis:7-alpine
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "Starting Redis backup..."
                  
                  # Create backup filename with timestamp
                  BACKUP_FILE="redis-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S).rdb"
                  
                  # Create Redis backup
                  redis-cli --no-auth-warning -h redis-service -a "$REDIS_PASSWORD" --rdb "/tmp/$BACKUP_FILE"
                  
                  # Compress backup
                  gzip "/tmp/$BACKUP_FILE"
                  
                  # Upload to S3 with encryption
                  aws s3 cp "/tmp/$BACKUP_FILE.gz" "s3://$S3_BACKUP_BUCKET/redis/$BACKUP_FILE.gz" \
                    --server-side-encryption AES256 \
                    --storage-class STANDARD_IA
                  
                  echo "Redis backup completed successfully: $BACKUP_FILE.gz"
                  
                  # Cleanup old backups (keep last 7 days for Redis)
                  CUTOFF_DATE=$(date -d "7 days ago" +%Y%m%d)
                  aws s3 ls "s3://$S3_BACKUP_BUCKET/redis/" | while read -r line; do
                    FILE_DATE=$(echo "$line" | awk '{print $4}' | cut -d'-' -f2 | cut -d'-' -f1)
                    if [ "$FILE_DATE" -lt "$CUTOFF_DATE" ]; then
                      FILE_NAME=$(echo "$line" | awk '{print $4}')
                      aws s3 rm "s3://$S3_BACKUP_BUCKET/redis/$FILE_NAME"
                      echo "Deleted old backup: $FILE_NAME"
                    fi
                  done
              env:
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: medessence-secrets
                      key: REDIS_PASSWORD
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: medessence-secrets
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: medessence-secrets
                      key: AWS_SECRET_ACCESS_KEY
                - name: S3_BACKUP_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: medessence-secrets
                      key: S3_BACKUP_BUCKET
              resources:
                requests:
                  memory: 128Mi
                  cpu: 50m
                limits:
                  memory: 256Mi
                  cpu: 200m
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsUser: 999
                runAsGroup: 999
                capabilities:
                  drop:
                    - ALL
              volumeMounts:
                - name: temp-storage
                  mountPath: /tmp
          volumes:
            - name: temp-storage
              emptyDir:
                sizeLimit: 2Gi

---
# Redis Monitoring ServiceMonitor (for Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-monitor
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    environment: ${ENVIRONMENT}
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: redis
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      scrapeTimeout: 10s

---
# Network Policy for Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-netpol
  namespace: medessence-${ENVIRONMENT}
  labels:
    app: redis
    environment: ${ENVIRONMENT}
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow connections from application pods only
    - from:
        - podSelector:
            matchLabels:
              app: medessence-backend
        - podSelector:
            matchLabels:
              app: medessence-websocket-proxy
        - podSelector:
            matchLabels:
              app: medessence-transcription
        - podSelector:
            matchLabels:
              app: medessence-report-generation
        - podSelector:
            matchLabels:
              app: medessence-summary-generation
      ports:
        - protocol: TCP
          port: 6379
    # Allow monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9121
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow outbound for backup to S3
    - to: []
      ports:
        - protocol: TCP
          port: 443