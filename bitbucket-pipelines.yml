# =============================================================================
# MedEssenceAI Bitbucket Pipelines Configuration
# Healthcare-grade CI/CD pipeline with security, compliance, and deployment
# =============================================================================

image: node:18

# Global Pipeline Options
options:
  docker: true
  max-time: 120

# Pipeline Definitions
definitions:
  # =============================================================================
  # Services Configuration
  # =============================================================================
  services:
    postgres:
      image: postgres:15-alpine
      variables:
        POSTGRES_DB: medessence_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
    
    redis:
      image: redis:7-alpine
      
    docker:
      memory: 4096

  # =============================================================================
  # Reusable Steps
  # =============================================================================
  steps:
    # Node.js Setup Steps
    - &setup-node
      name: Setup Node.js Environment
      script:
        - echo "Setting up Node.js environment..."
        - node --version
        - npm --version
        - npm config set cache /opt/atlassian/pipelines/agent/build/.npm-cache --global

    - &install-node-deps
      name: Install Node.js Dependencies
      script:
        - cd backend && npm ci --prefer-offline --no-audit
        - cd ../frontend && npm ci --prefer-offline --no-audit
      caches:
        - node-backend
        - node-frontend

    # Python Setup Steps
    - &setup-python
      name: Setup Python Environment
      image: python:3.11
      script:
        - python --version
        - pip --version
        - pip install --upgrade pip

    # Security & Quality Steps
    - &security-scan
      name: Security & Vulnerability Scan
      script:
        # Node.js security audit
        - cd backend && npm audit --audit-level=moderate || true
        - cd ../frontend && npm audit --audit-level=moderate || true
        # Python security scan
        - pip install safety bandit
        - find services/ -name "requirements.txt" -exec safety check -r {} \; || true
        - bandit -r services/ -f json -o bandit-report.json || true
      artifacts:
        - bandit-report.json
        - backend/npm-audit.json
        - frontend/npm-audit.json

    # Code Quality Steps
    - &code-quality
      name: Code Quality Analysis
      script:
        # JavaScript/TypeScript linting
        - cd backend && npm run lint
        - cd ../frontend && npm run lint
        - cd ../frontend && npm run type-check
        # Python code quality
        - pip install flake8 black mypy
        - for service in transcription report-generation summary-generation; do
            if [ -d "services/$service/app" ]; then
              flake8 "services/$service/app/" --max-line-length=88 --extend-ignore=E203,W503 || true;
            fi;
          done

    # Testing Steps
    - &backend-tests
      name: Backend Tests
      services:
        - postgres
        - redis
      script:
        - cd backend
        - export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/medessence_test"
        - export REDIS_URL="redis://localhost:6379"
        - export JWT_SECRET="test_jwt_secret_key_very_long_and_secure"
        - export NODE_ENV="test"
        - npx prisma generate
        - npx prisma db push --skip-generate
        - npm run db:seed
        - npm run test:ci
      artifacts:
        - backend/coverage/**

    - &frontend-tests
      name: Frontend Build & Test
      script:
        - cd frontend
        - export NODE_ENV="production"
        - export NEXT_TELEMETRY_DISABLED="1"
        - export NEXT_PUBLIC_WEBSOCKET_URL="ws://localhost:8080"
        - export NEXT_PUBLIC_API_URL="http://localhost:3000"
        - npm run build
      artifacts:
        - frontend/.next/**

    - &python-service-tests
      name: Python Services Tests
      image: python:3.11
      services:
        - postgres
        - redis
      script:
        - export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/medessence_test"
        - export REDIS_URL="redis://localhost:6379"
        - export PYTHONPATH="/opt/atlassian/pipelines/agent/build"
        - for service in transcription report-generation summary-generation; do
            if [ -d "services/$service" ]; then
              cd "services/$service";
              pip install -r requirements.txt;
              pip install pytest pytest-asyncio pytest-cov;
              python -m pytest tests/ -v --cov=app --cov-report=xml || true;
              cd ../../;
            fi;
          done
      artifacts:
        - services/*/coverage.xml

    # Medical Compliance Steps
    - &hipaa-compliance
      name: HIPAA Compliance Validation
      script:
        - echo "üè• Performing HIPAA compliance validation..."
        # Check for potential PHI data exposure
        - | 
          if grep -r -E '\b\d{3}-\d{2}-\d{4}\b|\b\d{9}\b' --include="*.js" --include="*.ts" --include="*.py" --exclude-dir=node_modules . 2>/dev/null; then
            echo "‚ö†Ô∏è  Potential SSN pattern found - requires review"
          fi
        # Validate audit logging implementation
        - |
          if ! grep -r -l "audit" backend/src/ services/ 2>/dev/null; then
            echo "‚ùå Audit logging implementation not found!"
            exit 1
          fi
        # Check encryption implementation
        - |
          if ! grep -r -E "(encrypt|bcrypt|scrypt|cipher)" --include="*.js" --include="*.ts" --include="*.py" backend/src/ services/ 2>/dev/null; then
            echo "‚ùå Encryption implementation not found!"
            exit 1
          fi
        - echo "‚úÖ HIPAA compliance validation completed"

    # Docker Build Steps
    - &docker-build
      name: Build Docker Images
      services:
        - docker
      script:
        - export IMAGE_TAG=${BITBUCKET_COMMIT:0:8}
        # Build frontend image
        - docker build -t $BITBUCKET_REPO_FULL_NAME-frontend:$IMAGE_TAG -f frontend/Dockerfile.production frontend/
        # Build backend image  
        - docker build -t $BITBUCKET_REPO_FULL_NAME-backend:$IMAGE_TAG -f backend/Dockerfile backend/
        # Build service images
        - for service in transcription report-generation summary-generation; do
            docker build -t $BITBUCKET_REPO_FULL_NAME-$service:$IMAGE_TAG -f services/$service/Dockerfile services/$service/;
          done
        # Test image functionality
        - docker run -d --name test-frontend $BITBUCKET_REPO_FULL_NAME-frontend:$IMAGE_TAG
        - sleep 10
        - docker logs test-frontend
        - docker stop test-frontend || true
        - docker rm test-frontend || true

    - &docker-push
      name: Push Docker Images
      services:
        - docker
      script:
        - export IMAGE_TAG=${BITBUCKET_COMMIT:0:8}
        # Log into Bitbucket container registry
        - docker login -u $BITBUCKET_USERNAME -p $BITBUCKET_APP_PASSWORD bitbucket-docker.pkg.dev
        # Push all service images
        - for service in frontend backend transcription report-generation summary-generation; do
            docker tag $BITBUCKET_REPO_FULL_NAME-$service:$IMAGE_TAG bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:$IMAGE_TAG;
            docker push bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:$IMAGE_TAG;
            if [ "$BITBUCKET_BRANCH" = "main" ]; then
              docker tag $BITBUCKET_REPO_FULL_NAME-$service:$IMAGE_TAG bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:latest;
              docker push bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:latest;
            fi;
          done

    # Deployment Steps
    - &deploy-staging
      name: Deploy to Staging
      deployment: staging
      script:
        - echo "üöÄ Deploying to staging environment..."
        - export IMAGE_TAG=${BITBUCKET_COMMIT:0:8}
        - export ENVIRONMENT="staging"
        # Install kubectl
        - curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        - chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        # Configure kubectl (assuming AWS EKS)
        - aws eks update-kubeconfig --region $AWS_REGION --name medessence-cluster-staging
        # Apply Kubernetes manifests with environment substitution
        - envsubst < k8s/namespace.yml | kubectl apply -f -
        - envsubst < k8s/configmap.yml | kubectl apply -f -
        - envsubst < k8s/backend.yml | kubectl apply -f -
        - envsubst < k8s/frontend.yml | kubectl apply -f -
        - envsubst < k8s/services.yml | kubectl apply -f -
        # Wait for deployment
        - kubectl rollout status deployment/medessence-frontend -n medessence-staging --timeout=600s
        - kubectl rollout status deployment/medessence-backend -n medessence-staging --timeout=600s
        # Run health checks
        - sleep 30
        - ./scripts/health-check.sh staging

    - &deploy-production
      name: Deploy to Production
      deployment: production
      trigger: manual
      script:
        - echo "üè• Deploying to production environment..."
        - export IMAGE_TAG=${BITBUCKET_COMMIT:0:8}
        - export ENVIRONMENT="production"
        # Production deployment with additional safeguards
        - echo "Performing pre-deployment validation..."
        - ./scripts/pre-deployment-checks.sh production
        # Blue-green deployment
        - echo "Starting blue-green deployment..."
        - ./scripts/blue-green-deploy.sh production $IMAGE_TAG
        # Health checks
        - ./scripts/health-check.sh production
        - echo "‚úÖ Production deployment completed successfully"

  # =============================================================================
  # Caches Configuration
  # =============================================================================
  caches:
    node-backend: backend/node_modules
    node-frontend: frontend/node_modules
    npm-cache: ~/.npm
    pip-cache: ~/.cache/pip

# =============================================================================
# Pipeline Workflows
# =============================================================================
pipelines:
  # ---------------------------------------------------------------------------
  # Feature Branch Pipeline
  # ---------------------------------------------------------------------------
  branches:
    feature/*:
      - step: *setup-node
      - step: *install-node-deps
      - step: *security-scan
      - step: *code-quality
      - step: *backend-tests
      - step: *frontend-tests
      - step:
          <<: *python-service-tests
          name: Python Services Tests (Feature)
      - step: *hipaa-compliance
      - step: *docker-build

  # ---------------------------------------------------------------------------
  # Develop Branch Pipeline
  # ---------------------------------------------------------------------------
  branches:
    develop:
      - step: *setup-node
      - step: *install-node-deps
      - parallel:
        - step: *security-scan
        - step: *code-quality
        - step: *hipaa-compliance
      - parallel:
        - step: *backend-tests
        - step: *frontend-tests
        - step: *python-service-tests
      - step: *docker-build
      - step:
          <<: *docker-push
          name: Push Images (Develop)

  # ---------------------------------------------------------------------------
  # Main Branch Pipeline (Production Ready)
  # ---------------------------------------------------------------------------
  branches:
    main:
      - step: *setup-node
      - step: *install-node-deps
      - parallel:
        - step: *security-scan
        - step: *code-quality
        - step: *hipaa-compliance
      - parallel:
        - step: *backend-tests
        - step: *frontend-tests
        - step: *python-service-tests
      - step:
          name: Integration Tests
          services:
            - postgres
            - redis
          script:
            - echo "Running integration tests..."
            - cd tests/integration
            - export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/medessence_test"
            - export REDIS_URL="redis://localhost:6379"
            - pip install requests pytest
            - python run_all_tests.py
      - step: *docker-build
      - step: *docker-push
      - step: *deploy-staging
      - step:
          <<: *deploy-production
          name: Deploy to Production (Manual)

  # ---------------------------------------------------------------------------
  # Pull Request Pipeline
  # ---------------------------------------------------------------------------
  pull-requests:
    '**':
      - step: *setup-node
      - step: *install-node-deps
      - parallel:
        - step:
            <<: *security-scan
            name: Security Scan (PR)
        - step:
            <<: *code-quality
            name: Code Quality (PR)
        - step: *hipaa-compliance
      - parallel:
        - step:
            <<: *backend-tests
            name: Backend Tests (PR)
        - step:
            <<: *frontend-tests
            name: Frontend Build (PR)
        - step:
            <<: *python-service-tests
            name: Python Tests (PR)
      - step:
          <<: *docker-build
          name: Docker Build Validation (PR)

  # ---------------------------------------------------------------------------
  # Release Pipeline
  # ---------------------------------------------------------------------------
  tags:
    'v*':
      - step: *setup-node
      - step: *install-node-deps
      - parallel:
        - step: *security-scan
        - step: *code-quality
        - step: *hipaa-compliance
      - parallel:
        - step: *backend-tests
        - step: *frontend-tests
        - step: *python-service-tests
      - step: *docker-build
      - step:
          name: Push Release Images
          services:
            - docker
          script:
            - export IMAGE_TAG=$BITBUCKET_TAG
            - docker login -u $BITBUCKET_USERNAME -p $BITBUCKET_APP_PASSWORD bitbucket-docker.pkg.dev
            - for service in frontend backend transcription report-generation summary-generation; do
                docker tag $BITBUCKET_REPO_FULL_NAME-$service:${BITBUCKET_COMMIT:0:8} bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:$IMAGE_TAG;
                docker push bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:$IMAGE_TAG;
                docker tag $BITBUCKET_REPO_FULL_NAME-$service:${BITBUCKET_COMMIT:0:8} bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:stable;
                docker push bitbucket-docker.pkg.dev/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/$service:stable;
              done
      - step:
          <<: *deploy-production
          name: Production Release Deployment

  # ---------------------------------------------------------------------------
  # Custom Pipeline for Manual Operations
  # ---------------------------------------------------------------------------
  custom:
    # Security-only pipeline
    security-scan:
      - step: *setup-node
      - step: *install-node-deps
      - step: *security-scan
      - step: *hipaa-compliance
      - step:
          name: Comprehensive Security Analysis
          script:
            - echo "Running comprehensive security analysis..."
            # Snyk scanning (if token available)
            - if [ -n "$SNYK_TOKEN" ]; then
                npm install -g snyk;
                cd backend && snyk auth $SNYK_TOKEN && snyk test;
                cd ../frontend && snyk test;
              fi
            # Container security scanning
            - docker build -t security-test -f backend/Dockerfile backend/
            - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy image security-test || true

    # Deployment-only pipeline
    deploy-only:
      - step:
          name: Manual Deployment
          deployment: production
          trigger: manual
          script:
            - echo "Manual deployment triggered..."
            - export IMAGE_TAG=${BITBUCKET_COMMIT:0:8}
            - if [ -z "$TARGET_ENVIRONMENT" ]; then export TARGET_ENVIRONMENT="staging"; fi
            - echo "Deploying to $TARGET_ENVIRONMENT"
            - ./scripts/deploy.sh $TARGET_ENVIRONMENT $IMAGE_TAG

    # Database migration pipeline
    db-migration:
      - step:
          name: Database Migration
          script:
            - echo "Running database migration..."
            - cd backend
            - npm ci
            - export DATABASE_URL=$PRODUCTION_DATABASE_URL
            # Create backup first
            - echo "Creating database backup..."
            # Run migration
            - npx prisma migrate deploy
            - echo "Migration completed successfully"

    # Rollback pipeline
    rollback:
      - step:
          name: Emergency Rollback
          deployment: production
          trigger: manual
          script:
            - echo "üö® Emergency rollback initiated..."
            - export TARGET_ENVIRONMENT=${TARGET_ENVIRONMENT:-production}
            - kubectl rollout undo deployment/medessence-frontend -n medessence-$TARGET_ENVIRONMENT
            - kubectl rollout undo deployment/medessence-backend -n medessence-$TARGET_ENVIRONMENT
            - kubectl rollout status deployment/medessence-frontend -n medessence-$TARGET_ENVIRONMENT --timeout=300s
            - kubectl rollout status deployment/medessence-backend -n medessence-$TARGET_ENVIRONMENT --timeout=300s
            - ./scripts/health-check.sh $TARGET_ENVIRONMENT
            - echo "‚úÖ Rollback completed successfully"