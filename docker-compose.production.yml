version: '3.8'

services:
  # =============================================================================
  # Frontend Service
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_WEBSOCKET_URL=${WEBSOCKET_URL}
      - NEXT_PUBLIC_API_URL=${API_URL}
    depends_on:
      - websocket-proxy
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M

  # =============================================================================
  # Nginx Reverse Proxy (Production)
  # =============================================================================
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ./docker/nginx/test.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - websocket-proxy
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # WebSocket Proxy Service
  # =============================================================================
  websocket-proxy:
    build:
      context: ./services/core
      dockerfile: ../../Dockerfile.websocket-proxy
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - USE_VOSK=${USE_VOSK:-true}
      - VOSK_SERVICE_URL=ws://vosk-service:8002
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_PROVIDER_PRIORITY=${AI_PROVIDER_PRIORITY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
    volumes:
      - app-logs:/app/logs
      - app-data:/app/data
    depends_on:
      - vosk-service
      - redis
      - postgres
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # =============================================================================
  # Vosk Transcription Service
  # =============================================================================
  vosk-service:
    build:
      context: .
      dockerfile: Dockerfile.vosk
      target: production
    restart: unless-stopped
    environment:
      - VOSK_MODEL_PATH=${VOSK_MODEL_PATH}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./vosk-models:/app/vosk-models:ro
      - app-logs:/app/logs
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${VOSK_MEMORY_LIMIT:-8G}
          cpus: '2.0'
        reservations:
          memory: 4G

  # =============================================================================
  # Database Services
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-2G}
          cpus: '1.0'
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory ${REDIS_MEMORY_LIMIT:-1G}
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - medessenceai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-1G}
          cpus: '0.5'
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - medessenceai-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=medessenceai_admin_change_me
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - medessenceai-network
    profiles:
      - monitoring

  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - medessenceai-network
    profiles:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - app-logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - medessenceai-network
    profiles:
      - monitoring

  # =============================================================================
  # Backup Service
  # =============================================================================
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    restart: "no"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - app-data:/backup/app:ro
    depends_on:
      - postgres
      - redis
    networks:
      - medessenceai-network
    profiles:
      - backup

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  medessenceai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16